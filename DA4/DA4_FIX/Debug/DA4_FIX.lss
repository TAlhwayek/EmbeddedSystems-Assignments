
DA4_FIX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00000da8  00000e3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080021c  0080021c  00000f58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4f  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a90  00000000  00000000  00001ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053f  00000000  00000000  00002953  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00002e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057c  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a4  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_18>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  8c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  90:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  94:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  98:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  9c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  a8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  ac:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b0:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  b4:	05 02       	muls	r16, r21
  b6:	0c 02       	muls	r16, r28
  b8:	0c 02       	muls	r16, r28
  ba:	0c 02       	muls	r16, r28
  bc:	0c 02       	muls	r16, r28
  be:	0c 02       	muls	r16, r28
  c0:	0c 02       	muls	r16, r28
  c2:	0c 02       	muls	r16, r28
  c4:	0c 02       	muls	r16, r28
  c6:	0c 02       	muls	r16, r28
  c8:	0c 02       	muls	r16, r28
  ca:	0c 02       	muls	r16, r28
  cc:	0c 02       	muls	r16, r28
  ce:	0c 02       	muls	r16, r28
  d0:	e3 01       	movw	r28, r6
  d2:	f0 01       	movw	r30, r0
  d4:	0c 02       	muls	r16, r28
  d6:	0c 02       	muls	r16, r28
  d8:	0c 02       	muls	r16, r28
  da:	0c 02       	muls	r16, r28
  dc:	0c 02       	muls	r16, r28
  de:	0c 02       	muls	r16, r28
  e0:	0c 02       	muls	r16, r28
  e2:	0c 02       	muls	r16, r28
  e4:	0c 02       	muls	r16, r28
  e6:	0c 02       	muls	r16, r28
  e8:	0c 02       	muls	r16, r28
  ea:	0c 02       	muls	r16, r28
  ec:	0c 02       	muls	r16, r28
  ee:	0c 02       	muls	r16, r28
  f0:	0c 02       	muls	r16, r28
  f2:	0c 02       	muls	r16, r28
  f4:	f6 01       	movw	r30, r12
  f6:	e7 01       	movw	r28, r14
  f8:	0c 02       	muls	r16, r28
  fa:	0c 02       	muls	r16, r28
  fc:	0c 02       	muls	r16, r28
  fe:	0c 02       	muls	r16, r28
 100:	0c 02       	muls	r16, r28
 102:	dc 01       	movw	r26, r24
 104:	0c 02       	muls	r16, r28
 106:	0c 02       	muls	r16, r28
 108:	0c 02       	muls	r16, r28
 10a:	0c 02       	muls	r16, r28
 10c:	0c 02       	muls	r16, r28
 10e:	0c 02       	muls	r16, r28
 110:	df 01       	movw	r26, r30

00000112 <__ctors_end>:
 112:	11 24       	eor	r1, r1
 114:	1f be       	out	0x3f, r1	; 63
 116:	cf ef       	ldi	r28, 0xFF	; 255
 118:	d8 e0       	ldi	r29, 0x08	; 8
 11a:	de bf       	out	0x3e, r29	; 62
 11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
 11e:	12 e0       	ldi	r17, 0x02	; 2
 120:	a0 e0       	ldi	r26, 0x00	; 0
 122:	b1 e0       	ldi	r27, 0x01	; 1
 124:	e8 ea       	ldi	r30, 0xA8	; 168
 126:	fd e0       	ldi	r31, 0x0D	; 13
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
 12a:	05 90       	lpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	ac 31       	cpi	r26, 0x1C	; 28
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
 134:	22 e0       	ldi	r18, 0x02	; 2
 136:	ac e1       	ldi	r26, 0x1C	; 28
 138:	b2 e0       	ldi	r27, 0x02	; 2
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	a6 32       	cpi	r26, 0x26	; 38
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
 148:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <_exit>

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <uart_putchar>:
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
	UCSR0B |= ( 1<< RXCIE0); 
}

void uart_putchar(char c, FILE *stream) {
 150:	cf 93       	push	r28
 152:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 154:	8a 30       	cpi	r24, 0x0A	; 10
 156:	19 f4       	brne	.+6      	; 0x15e <uart_putchar+0xe>
		uart_putchar('\r', stream);
 158:	8d e0       	ldi	r24, 0x0D	; 13
 15a:	0e 94 a8 00 	call	0x150	; 0x150 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 15e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 162:	85 ff       	sbrs	r24, 5
 164:	fc cf       	rjmp	.-8      	; 0x15e <uart_putchar+0xe>
	UDR0 = c;
 166:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <uart_getchar>:
volatile bool ADCon;
volatile bool receive;
volatile bool blink = false;

char uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0);
 16e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 172:	88 23       	and	r24, r24
 174:	e4 f7       	brge	.-8      	; 0x16e <uart_getchar>
	return UDR0;
 176:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 17a:	08 95       	ret

0000017c <uart_init>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
 17c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
 180:	82 e2       	ldi	r24, 0x22	; 34
 182:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
 186:	e0 ec       	ldi	r30, 0xC0	; 192
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	80 83       	st	Z, r24
	#else
	UCSR0A &= ~(_BV(U2X0));
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 196:	e1 ec       	ldi	r30, 0xC1	; 193
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	80 83       	st	Z, r24
	UCSR0B |= ( 1<< RXCIE0); 
 19e:	80 81       	ld	r24, Z
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <printMenu>:
	return UDR0;
}

// Function that prints the help menu
void printMenu(void) {
	printf("\nHelp Menu: \n");
 1a6:	8c e1       	ldi	r24, 0x1C	; 28
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
	printf("o - Turn on PB5\n");
 1ae:	89 e2       	ldi	r24, 0x29	; 41
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
	printf("O - Turn off PB5\n");
 1b6:	89 e3       	ldi	r24, 0x39	; 57
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
	printf("b - Make PB3 blink for 0.32s\n");
 1be:	8a e4       	ldi	r24, 0x4A	; 74
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
	printf("P - Turn off PB3\n");
 1c6:	87 e6       	ldi	r24, 0x67	; 103
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
	printf("a - Get potentiometer value in volts\n");
 1ce:	88 e7       	ldi	r24, 0x78	; 120
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
	printf("A - Stop getting potentiometer values\n");
 1d6:	8d e9       	ldi	r24, 0x9D	; 157
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
	printf("h - Print this help menu again\n");
 1de:	83 ec       	ldi	r24, 0xC3	; 195
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
 1e6:	08 95       	ret

000001e8 <InitTimer1>:
}

void InitTimer1(void)
{
	//Set Initial Timer value
	TCNT1 = 40525;
 1e8:	8d e4       	ldi	r24, 0x4D	; 77
 1ea:	9e e9       	ldi	r25, 0x9E	; 158
 1ec:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1f0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1f4:	08 95       	ret

000001f6 <StartTimer1>:
}

void StartTimer1(void)
{
	// set prescaler to 64 and start timer1
	TCCR1B = (1 << CS11) | (1 << CS10); 
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1fc:	08 95       	ret

000001fe <StopTimer>:
}

// Stop timer1
void StopTimer(void)
{
	TCCR1B &= ~(1 << CS11);
 1fe:	e1 e8       	ldi	r30, 0x81	; 129
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	8d 7f       	andi	r24, 0xFD	; 253
 206:	80 83       	st	Z, r24
	TIMSK1 &= ~(1 << OCIE1A);
 208:	ef e6       	ldi	r30, 0x6F	; 111
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	80 83       	st	Z, r24
 212:	08 95       	ret

00000214 <SetADCChannel>:

// Set ADC by passing a value as a parameter
void SetADCChannel(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 214:	ec e7       	ldi	r30, 0x7C	; 124
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	90 81       	ld	r25, Z
 21a:	90 7f       	andi	r25, 0xF0	; 240
 21c:	8f 70       	andi	r24, 0x0F	; 15
 21e:	89 2b       	or	r24, r25
 220:	80 83       	st	Z, r24
 222:	08 95       	ret

00000224 <StartADC>:
}

// Start ADC
void StartADC(void)
{
	ADCSRA |= (1 << ADSC);
 224:	ea e7       	ldi	r30, 0x7A	; 122
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret

00000230 <DisableADC>:
}

// Disable ADC
void DisableADC(void)
{
	ADCSRA &= ~((1 << ADEN) | (1 << ADIE));
 230:	ea e7       	ldi	r30, 0x7A	; 122
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	87 77       	andi	r24, 0x77	; 119
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <InitADC>:
}

void InitADC(void)
{
	// Select Vref=Avcc and set left adjust result
	ADMUX |= (1 << REFS0);
 23c:	ec e7       	ldi	r30, 0x7C	; 124
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 64       	ori	r24, 0x40	; 64
 244:	80 83       	st	Z, r24
	// set prescaler to 32, enable autotriggering, enable ADC interrupt
	// and enable ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0) | (1 << ADATE) | (1 << ADEN);
 246:	ea e7       	ldi	r30, 0x7A	; 122
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	85 6a       	ori	r24, 0xA5	; 165
 24e:	80 83       	st	Z, r24
	// set ADC trigger source - Timer1 compare match A
	ADCSRB |= (1 << ADTS2) | (1 << ADTS1);
 250:	eb e7       	ldi	r30, 0x7B	; 123
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	86 60       	ori	r24, 0x06	; 6
 258:	80 83       	st	Z, r24
 25a:	08 95       	ret

0000025c <__vector_18>:
}

// USART Interrupt
// This gets the characters from the terminal
ISR (USART0_RX_vect) {
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	input =  getchar();
 27e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__iob>
 282:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__iob+0x1>
 286:	0e 94 86 03 	call	0x70c	; 0x70c <fgetc>
 28a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <input>
	receive = true;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <receive>
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <main>:

int main(void) {
	
	DDRB = 0x28;										// Set PORTB3,5 as outputs
 2b6:	88 e2       	ldi	r24, 0x28	; 40
 2b8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x28;										// Turn PORTB3,5 off (they start on)
 2ba:	85 b9       	out	0x05, r24	; 5
	float ADCValue = 0.0;								// Used to print voltage as float

	uart_init();										// Initialize UART
 2bc:	0e 94 be 00 	call	0x17c	; 0x17c <uart_init>
	stdout = &uart_output;								// UART output stream
 2c0:	e0 e2       	ldi	r30, 0x20	; 32
 2c2:	f2 e0       	ldi	r31, 0x02	; 2
 2c4:	8e e0       	ldi	r24, 0x0E	; 14
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	93 83       	std	Z+3, r25	; 0x03
 2ca:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;								// UART input stream
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	91 83       	std	Z+1, r25	; 0x01
 2d2:	80 83       	st	Z, r24
	printMenu();										// Print help screen on boot
 2d4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printMenu>
	sei();												// Enable global interrupts
 2d8:	78 94       	sei
	
	while(1) {
		
		// On each loop, check if blink is still set
		// If it's still set, let the LED blink
		if (blink)										// Keep looping while blink is true
 2da:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
 2de:	81 11       	cpse	r24, r1
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <main+0x4a>
 2e2:	18 c0       	rjmp	.+48     	; 0x314 <main+0x5e>
		{
			// 0.32s delay
			for(int i = 0; i < 1000; i++) {				// Loop 1000 times
				int counter = 0;						// Reset counter each loop
				while (counter < 20) {					// Repeat 20 times
					while ((TIFR0 & 0x01) == 0);		// Wait for timer0 overflow
 2e4:	a8 9b       	sbis	0x15, 0	; 21
 2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <main+0x2e>
					counter++;							// Increment counter after every timer0 overflow
 2e8:	01 96       	adiw	r24, 0x01	; 1
					TIFR0=0x01;							// Reset the timer0 overflow flag
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	25 bb       	out	0x15, r18	; 21
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <main+0x3e>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
		if (blink)										// Keep looping while blink is true
		{
			// 0.32s delay
			for(int i = 0; i < 1000; i++) {				// Loop 1000 times
				int counter = 0;						// Reset counter each loop
				while (counter < 20) {					// Repeat 20 times
 2f4:	84 31       	cpi	r24, 0x14	; 20
 2f6:	91 05       	cpc	r25, r1
 2f8:	ac f3       	brlt	.-22     	; 0x2e4 <main+0x2e>
		// On each loop, check if blink is still set
		// If it's still set, let the LED blink
		if (blink)										// Keep looping while blink is true
		{
			// 0.32s delay
			for(int i = 0; i < 1000; i++) {				// Loop 1000 times
 2fa:	4f 5f       	subi	r20, 0xFF	; 255
 2fc:	5f 4f       	sbci	r21, 0xFF	; 255
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <main+0x4e>
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	48 3e       	cpi	r20, 0xE8	; 232
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	58 07       	cpc	r21, r24
 30a:	94 f3       	brlt	.-28     	; 0x2f0 <main+0x3a>
					while ((TIFR0 & 0x01) == 0);		// Wait for timer0 overflow
					counter++;							// Increment counter after every timer0 overflow
					TIFR0=0x01;							// Reset the timer0 overflow flag
				}
			}
			PORTB ^= (1<<DDB3);							// Toggle LED at PB3
 30c:	95 b1       	in	r25, 0x05	; 5
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	89 27       	eor	r24, r25
 312:	85 b9       	out	0x05, r24	; 5
		}
		
		// Update ADC value and print
		if (ADCon) {									// Check if ADCon is true
 314:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <ADCon>
 318:	88 23       	and	r24, r24
 31a:	71 f1       	breq	.+92     	; 0x378 <main+0xc2>
			if ((TIFR1 & 0x01) == 1) {					// Check for timer1 overflow (auto-trigger)
 31c:	b0 9b       	sbis	0x16, 0	; 22
 31e:	2c c0       	rjmp	.+88     	; 0x378 <main+0xc2>
			ADCValue = (float)(ADC) * 5.00 / 1023.00;	// Convert potentiometer value to voltage
 320:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 324:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 85 02 	call	0x50a	; 0x50a <__floatunsisf>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 ea       	ldi	r20, 0xA0	; 160
 336:	50 e4       	ldi	r21, 0x40	; 64
 338:	0e 94 13 03 	call	0x626	; 0x626 <__mulsf3>
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 ec       	ldi	r19, 0xC0	; 192
 340:	4f e7       	ldi	r20, 0x7F	; 127
 342:	54 e4       	ldi	r21, 0x44	; 68
 344:	0e 94 13 02 	call	0x426	; 0x426 <__divsf3>
			printf("ADC value = %.2f V\n", ADCValue);	// Print voltage
 348:	9f 93       	push	r25
 34a:	8f 93       	push	r24
 34c:	7f 93       	push	r23
 34e:	6f 93       	push	r22
 350:	82 ee       	ldi	r24, 0xE2	; 226
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	9f 93       	push	r25
 356:	8f 93       	push	r24
 358:	0e 94 c4 03 	call	0x788	; 0x788 <printf>
			TCNT1 = 40525;								// Reset timer1
 35c:	8d e4       	ldi	r24, 0x4D	; 77
 35e:	9e e9       	ldi	r25, 0x9E	; 158
 360:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 364:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			TIFR1= 0x01;								// Reset timer1 overflow flag
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	86 bb       	out	0x16, r24	; 22
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
			}
		}
		
		// This is where the switch statement starts
		if (receive) {									// When a character is received
 378:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <receive>
 37c:	88 23       	and	r24, r24
 37e:	09 f4       	brne	.+2      	; 0x382 <main+0xcc>
 380:	ac cf       	rjmp	.-168    	; 0x2da <main+0x24>
		printf("You wrote %c\n", input);				// Show what the user sent
 382:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <input>
 386:	1f 92       	push	r1
 388:	8f 93       	push	r24
 38a:	86 ef       	ldi	r24, 0xF6	; 246
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	9f 93       	push	r25
 390:	8f 93       	push	r24
 392:	0e 94 c4 03 	call	0x788	; 0x788 <printf>
		switch (input) {								// Switch statement based on input
 396:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <input>
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	fc 01       	movw	r30, r24
 3a6:	e1 54       	subi	r30, 0x41	; 65
 3a8:	f1 09       	sbc	r31, r1
 3aa:	ef 32       	cpi	r30, 0x2F	; 47
 3ac:	f1 05       	cpc	r31, r1
 3ae:	a0 f5       	brcc	.+104    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3b0:	e6 5a       	subi	r30, 0xA6	; 166
 3b2:	ff 4f       	sbci	r31, 0xFF	; 255
 3b4:	0c 94 80 03 	jmp	0x700	; 0x700 <__tablejump2__>
			
			case 'h':				// When h is received
			printMenu();			// Print help screen
 3b8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <printMenu>
			break;
 3bc:	31 c0       	rjmp	.+98     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	
			case 'o':				// When o is received
			PORTB &= ~(1 << DDB5);	// Turn on PB5
 3be:	85 b1       	in	r24, 0x05	; 5
 3c0:	8f 7d       	andi	r24, 0xDF	; 223
 3c2:	85 b9       	out	0x05, r24	; 5
			break;  
 3c4:	2d c0       	rjmp	.+90     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			
			case 'O':				// When O is received				
			PORTB |= (1 << DDB5);	// Turn off PB5
 3c6:	85 b1       	in	r24, 0x05	; 5
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	85 b9       	out	0x05, r24	; 5
			break;
 3cc:	29 c0       	rjmp	.+82     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			
			case 'b':									// When b is received
			TCCR0A = 0;				// Normal Operation
 3ce:	14 bc       	out	0x24, r1	; 36
			TCNT0 = 0x00;			// Start the timer
 3d0:	16 bc       	out	0x26, r1	; 38
			TCCR0B |= (1 << CS00);	// Set prescaler to 1 and start the timer
 3d2:	85 b5       	in	r24, 0x25	; 37
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	85 bd       	out	0x25, r24	; 37
			blink = true;			// Allow the LED to blink
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__data_end>
			break;
 3de:	20 c0       	rjmp	.+64     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			
			case 'P':				// When P is received (pressed)
			PORTB |= (1 << DDB3);	// Turn off the LED
 3e0:	85 b1       	in	r24, 0x05	; 5
 3e2:	88 60       	ori	r24, 0x08	; 8
 3e4:	85 b9       	out	0x05, r24	; 5
			blink = false;			// Stop LED from blinking
 3e6:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
			break;
 3ea:	1a c0       	rjmp	.+52     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			
			case 'a':				// When a is pressed
			InitADC();				// Initialize ADC
 3ec:	0e 94 1e 01 	call	0x23c	; 0x23c <InitADC>
			SetADCChannel(0);		// Select ADC0
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 0a 01 	call	0x214	; 0x214 <SetADCChannel>
			InitTimer1();			// Prepare timer1
 3f6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <InitTimer1>
			StartTimer1();			// Start timer 1
 3fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <StartTimer1>
			StartADC();				// Start ADC conversion
 3fe:	0e 94 12 01 	call	0x224	; 0x224 <StartADC>
			ADCon = true;			// Enable ADC printing
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <ADCon>
			break;
 408:	0b c0       	rjmp	.+22     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			
			
			
			case 'A':				// When A is pressed
			ADCon = false;			// Stop ADC printing
 40a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <ADCon>
			StopTimer();			// Stop Timer1
 40e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <StopTimer>
			DisableADC();			// Disable ADC
 412:	0e 94 18 01 	call	0x230	; 0x230 <DisableADC>
			break;
 416:	04 c0       	rjmp	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			

			// If invalid command is received
			default:
			printf("Command not recognized\r\n");
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <puts>
			break;
			
			}
			receive = false;
 420:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <receive>
 424:	5a cf       	rjmp	.-332    	; 0x2da <main+0x24>

00000426 <__divsf3>:
 426:	0e 94 27 02 	call	0x44e	; 0x44e <__divsf3x>
 42a:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_round>
 42e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_pscB>
 432:	58 f0       	brcs	.+22     	; 0x44a <__divsf3+0x24>
 434:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_pscA>
 438:	40 f0       	brcs	.+16     	; 0x44a <__divsf3+0x24>
 43a:	29 f4       	brne	.+10     	; 0x446 <__divsf3+0x20>
 43c:	5f 3f       	cpi	r21, 0xFF	; 255
 43e:	29 f0       	breq	.+10     	; 0x44a <__divsf3+0x24>
 440:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 444:	51 11       	cpse	r21, r1
 446:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>
 44a:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_nan>

0000044e <__divsf3x>:
 44e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_split3>
 452:	68 f3       	brcs	.-38     	; 0x42e <__divsf3+0x8>

00000454 <__divsf3_pse>:
 454:	99 23       	and	r25, r25
 456:	b1 f3       	breq	.-20     	; 0x444 <__divsf3+0x1e>
 458:	55 23       	and	r21, r21
 45a:	91 f3       	breq	.-28     	; 0x440 <__divsf3+0x1a>
 45c:	95 1b       	sub	r25, r21
 45e:	55 0b       	sbc	r21, r21
 460:	bb 27       	eor	r27, r27
 462:	aa 27       	eor	r26, r26
 464:	62 17       	cp	r22, r18
 466:	73 07       	cpc	r23, r19
 468:	84 07       	cpc	r24, r20
 46a:	38 f0       	brcs	.+14     	; 0x47a <__divsf3_pse+0x26>
 46c:	9f 5f       	subi	r25, 0xFF	; 255
 46e:	5f 4f       	sbci	r21, 0xFF	; 255
 470:	22 0f       	add	r18, r18
 472:	33 1f       	adc	r19, r19
 474:	44 1f       	adc	r20, r20
 476:	aa 1f       	adc	r26, r26
 478:	a9 f3       	breq	.-22     	; 0x464 <__divsf3_pse+0x10>
 47a:	35 d0       	rcall	.+106    	; 0x4e6 <__divsf3_pse+0x92>
 47c:	0e 2e       	mov	r0, r30
 47e:	3a f0       	brmi	.+14     	; 0x48e <__divsf3_pse+0x3a>
 480:	e0 e8       	ldi	r30, 0x80	; 128
 482:	32 d0       	rcall	.+100    	; 0x4e8 <__divsf3_pse+0x94>
 484:	91 50       	subi	r25, 0x01	; 1
 486:	50 40       	sbci	r21, 0x00	; 0
 488:	e6 95       	lsr	r30
 48a:	00 1c       	adc	r0, r0
 48c:	ca f7       	brpl	.-14     	; 0x480 <__divsf3_pse+0x2c>
 48e:	2b d0       	rcall	.+86     	; 0x4e6 <__divsf3_pse+0x92>
 490:	fe 2f       	mov	r31, r30
 492:	29 d0       	rcall	.+82     	; 0x4e6 <__divsf3_pse+0x92>
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	bb 1f       	adc	r27, r27
 49c:	26 17       	cp	r18, r22
 49e:	37 07       	cpc	r19, r23
 4a0:	48 07       	cpc	r20, r24
 4a2:	ab 07       	cpc	r26, r27
 4a4:	b0 e8       	ldi	r27, 0x80	; 128
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__divsf3_pse+0x56>
 4a8:	bb 0b       	sbc	r27, r27
 4aa:	80 2d       	mov	r24, r0
 4ac:	bf 01       	movw	r22, r30
 4ae:	ff 27       	eor	r31, r31
 4b0:	93 58       	subi	r25, 0x83	; 131
 4b2:	5f 4f       	sbci	r21, 0xFF	; 255
 4b4:	3a f0       	brmi	.+14     	; 0x4c4 <__divsf3_pse+0x70>
 4b6:	9e 3f       	cpi	r25, 0xFE	; 254
 4b8:	51 05       	cpc	r21, r1
 4ba:	78 f0       	brcs	.+30     	; 0x4da <__divsf3_pse+0x86>
 4bc:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 4c0:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>
 4c4:	5f 3f       	cpi	r21, 0xFF	; 255
 4c6:	e4 f3       	brlt	.-8      	; 0x4c0 <__divsf3_pse+0x6c>
 4c8:	98 3e       	cpi	r25, 0xE8	; 232
 4ca:	d4 f3       	brlt	.-12     	; 0x4c0 <__divsf3_pse+0x6c>
 4cc:	86 95       	lsr	r24
 4ce:	77 95       	ror	r23
 4d0:	67 95       	ror	r22
 4d2:	b7 95       	ror	r27
 4d4:	f7 95       	ror	r31
 4d6:	9f 5f       	subi	r25, 0xFF	; 255
 4d8:	c9 f7       	brne	.-14     	; 0x4cc <__divsf3_pse+0x78>
 4da:	88 0f       	add	r24, r24
 4dc:	91 1d       	adc	r25, r1
 4de:	96 95       	lsr	r25
 4e0:	87 95       	ror	r24
 4e2:	97 f9       	bld	r25, 7
 4e4:	08 95       	ret
 4e6:	e1 e0       	ldi	r30, 0x01	; 1
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 1f       	adc	r24, r24
 4ee:	bb 1f       	adc	r27, r27
 4f0:	62 17       	cp	r22, r18
 4f2:	73 07       	cpc	r23, r19
 4f4:	84 07       	cpc	r24, r20
 4f6:	ba 07       	cpc	r27, r26
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__divsf3_pse+0xae>
 4fa:	62 1b       	sub	r22, r18
 4fc:	73 0b       	sbc	r23, r19
 4fe:	84 0b       	sbc	r24, r20
 500:	ba 0b       	sbc	r27, r26
 502:	ee 1f       	adc	r30, r30
 504:	88 f7       	brcc	.-30     	; 0x4e8 <__divsf3_pse+0x94>
 506:	e0 95       	com	r30
 508:	08 95       	ret

0000050a <__floatunsisf>:
 50a:	e8 94       	clt
 50c:	09 c0       	rjmp	.+18     	; 0x520 <__floatsisf+0x12>

0000050e <__floatsisf>:
 50e:	97 fb       	bst	r25, 7
 510:	3e f4       	brtc	.+14     	; 0x520 <__floatsisf+0x12>
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	99 23       	and	r25, r25
 522:	a9 f0       	breq	.+42     	; 0x54e <__floatsisf+0x40>
 524:	f9 2f       	mov	r31, r25
 526:	96 e9       	ldi	r25, 0x96	; 150
 528:	bb 27       	eor	r27, r27
 52a:	93 95       	inc	r25
 52c:	f6 95       	lsr	r31
 52e:	87 95       	ror	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b7 95       	ror	r27
 536:	f1 11       	cpse	r31, r1
 538:	f8 cf       	rjmp	.-16     	; 0x52a <__floatsisf+0x1c>
 53a:	fa f4       	brpl	.+62     	; 0x57a <__floatsisf+0x6c>
 53c:	bb 0f       	add	r27, r27
 53e:	11 f4       	brne	.+4      	; 0x544 <__floatsisf+0x36>
 540:	60 ff       	sbrs	r22, 0
 542:	1b c0       	rjmp	.+54     	; 0x57a <__floatsisf+0x6c>
 544:	6f 5f       	subi	r22, 0xFF	; 255
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	16 c0       	rjmp	.+44     	; 0x57a <__floatsisf+0x6c>
 54e:	88 23       	and	r24, r24
 550:	11 f0       	breq	.+4      	; 0x556 <__floatsisf+0x48>
 552:	96 e9       	ldi	r25, 0x96	; 150
 554:	11 c0       	rjmp	.+34     	; 0x578 <__floatsisf+0x6a>
 556:	77 23       	and	r23, r23
 558:	21 f0       	breq	.+8      	; 0x562 <__floatsisf+0x54>
 55a:	9e e8       	ldi	r25, 0x8E	; 142
 55c:	87 2f       	mov	r24, r23
 55e:	76 2f       	mov	r23, r22
 560:	05 c0       	rjmp	.+10     	; 0x56c <__floatsisf+0x5e>
 562:	66 23       	and	r22, r22
 564:	71 f0       	breq	.+28     	; 0x582 <__floatsisf+0x74>
 566:	96 e8       	ldi	r25, 0x86	; 134
 568:	86 2f       	mov	r24, r22
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	2a f0       	brmi	.+10     	; 0x57a <__floatsisf+0x6c>
 570:	9a 95       	dec	r25
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	88 1f       	adc	r24, r24
 578:	da f7       	brpl	.-10     	; 0x570 <__floatsisf+0x62>
 57a:	88 0f       	add	r24, r24
 57c:	96 95       	lsr	r25
 57e:	87 95       	ror	r24
 580:	97 f9       	bld	r25, 7
 582:	08 95       	ret

00000584 <__fp_inf>:
 584:	97 f9       	bld	r25, 7
 586:	9f 67       	ori	r25, 0x7F	; 127
 588:	80 e8       	ldi	r24, 0x80	; 128
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	08 95       	ret

00000590 <__fp_nan>:
 590:	9f ef       	ldi	r25, 0xFF	; 255
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	08 95       	ret

00000596 <__fp_pscA>:
 596:	00 24       	eor	r0, r0
 598:	0a 94       	dec	r0
 59a:	16 16       	cp	r1, r22
 59c:	17 06       	cpc	r1, r23
 59e:	18 06       	cpc	r1, r24
 5a0:	09 06       	cpc	r0, r25
 5a2:	08 95       	ret

000005a4 <__fp_pscB>:
 5a4:	00 24       	eor	r0, r0
 5a6:	0a 94       	dec	r0
 5a8:	12 16       	cp	r1, r18
 5aa:	13 06       	cpc	r1, r19
 5ac:	14 06       	cpc	r1, r20
 5ae:	05 06       	cpc	r0, r21
 5b0:	08 95       	ret

000005b2 <__fp_round>:
 5b2:	09 2e       	mov	r0, r25
 5b4:	03 94       	inc	r0
 5b6:	00 0c       	add	r0, r0
 5b8:	11 f4       	brne	.+4      	; 0x5be <__fp_round+0xc>
 5ba:	88 23       	and	r24, r24
 5bc:	52 f0       	brmi	.+20     	; 0x5d2 <__fp_round+0x20>
 5be:	bb 0f       	add	r27, r27
 5c0:	40 f4       	brcc	.+16     	; 0x5d2 <__fp_round+0x20>
 5c2:	bf 2b       	or	r27, r31
 5c4:	11 f4       	brne	.+4      	; 0x5ca <__fp_round+0x18>
 5c6:	60 ff       	sbrs	r22, 0
 5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <__fp_round+0x20>
 5ca:	6f 5f       	subi	r22, 0xFF	; 255
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	08 95       	ret

000005d4 <__fp_split3>:
 5d4:	57 fd       	sbrc	r21, 7
 5d6:	90 58       	subi	r25, 0x80	; 128
 5d8:	44 0f       	add	r20, r20
 5da:	55 1f       	adc	r21, r21
 5dc:	59 f0       	breq	.+22     	; 0x5f4 <__fp_splitA+0x10>
 5de:	5f 3f       	cpi	r21, 0xFF	; 255
 5e0:	71 f0       	breq	.+28     	; 0x5fe <__fp_splitA+0x1a>
 5e2:	47 95       	ror	r20

000005e4 <__fp_splitA>:
 5e4:	88 0f       	add	r24, r24
 5e6:	97 fb       	bst	r25, 7
 5e8:	99 1f       	adc	r25, r25
 5ea:	61 f0       	breq	.+24     	; 0x604 <__fp_splitA+0x20>
 5ec:	9f 3f       	cpi	r25, 0xFF	; 255
 5ee:	79 f0       	breq	.+30     	; 0x60e <__fp_splitA+0x2a>
 5f0:	87 95       	ror	r24
 5f2:	08 95       	ret
 5f4:	12 16       	cp	r1, r18
 5f6:	13 06       	cpc	r1, r19
 5f8:	14 06       	cpc	r1, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	f2 cf       	rjmp	.-28     	; 0x5e2 <__fp_split3+0xe>
 5fe:	46 95       	lsr	r20
 600:	f1 df       	rcall	.-30     	; 0x5e4 <__fp_splitA>
 602:	08 c0       	rjmp	.+16     	; 0x614 <__fp_splitA+0x30>
 604:	16 16       	cp	r1, r22
 606:	17 06       	cpc	r1, r23
 608:	18 06       	cpc	r1, r24
 60a:	99 1f       	adc	r25, r25
 60c:	f1 cf       	rjmp	.-30     	; 0x5f0 <__fp_splitA+0xc>
 60e:	86 95       	lsr	r24
 610:	71 05       	cpc	r23, r1
 612:	61 05       	cpc	r22, r1
 614:	08 94       	sec
 616:	08 95       	ret

00000618 <__fp_zero>:
 618:	e8 94       	clt

0000061a <__fp_szero>:
 61a:	bb 27       	eor	r27, r27
 61c:	66 27       	eor	r22, r22
 61e:	77 27       	eor	r23, r23
 620:	cb 01       	movw	r24, r22
 622:	97 f9       	bld	r25, 7
 624:	08 95       	ret

00000626 <__mulsf3>:
 626:	0e 94 26 03 	call	0x64c	; 0x64c <__mulsf3x>
 62a:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__fp_round>
 62e:	0e 94 cb 02 	call	0x596	; 0x596 <__fp_pscA>
 632:	38 f0       	brcs	.+14     	; 0x642 <__mulsf3+0x1c>
 634:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_pscB>
 638:	20 f0       	brcs	.+8      	; 0x642 <__mulsf3+0x1c>
 63a:	95 23       	and	r25, r21
 63c:	11 f0       	breq	.+4      	; 0x642 <__mulsf3+0x1c>
 63e:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 642:	0c 94 c8 02 	jmp	0x590	; 0x590 <__fp_nan>
 646:	11 24       	eor	r1, r1
 648:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>

0000064c <__mulsf3x>:
 64c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_split3>
 650:	70 f3       	brcs	.-36     	; 0x62e <__mulsf3+0x8>

00000652 <__mulsf3_pse>:
 652:	95 9f       	mul	r25, r21
 654:	c1 f3       	breq	.-16     	; 0x646 <__mulsf3+0x20>
 656:	95 0f       	add	r25, r21
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	55 1f       	adc	r21, r21
 65c:	62 9f       	mul	r22, r18
 65e:	f0 01       	movw	r30, r0
 660:	72 9f       	mul	r23, r18
 662:	bb 27       	eor	r27, r27
 664:	f0 0d       	add	r31, r0
 666:	b1 1d       	adc	r27, r1
 668:	63 9f       	mul	r22, r19
 66a:	aa 27       	eor	r26, r26
 66c:	f0 0d       	add	r31, r0
 66e:	b1 1d       	adc	r27, r1
 670:	aa 1f       	adc	r26, r26
 672:	64 9f       	mul	r22, r20
 674:	66 27       	eor	r22, r22
 676:	b0 0d       	add	r27, r0
 678:	a1 1d       	adc	r26, r1
 67a:	66 1f       	adc	r22, r22
 67c:	82 9f       	mul	r24, r18
 67e:	22 27       	eor	r18, r18
 680:	b0 0d       	add	r27, r0
 682:	a1 1d       	adc	r26, r1
 684:	62 1f       	adc	r22, r18
 686:	73 9f       	mul	r23, r19
 688:	b0 0d       	add	r27, r0
 68a:	a1 1d       	adc	r26, r1
 68c:	62 1f       	adc	r22, r18
 68e:	83 9f       	mul	r24, r19
 690:	a0 0d       	add	r26, r0
 692:	61 1d       	adc	r22, r1
 694:	22 1f       	adc	r18, r18
 696:	74 9f       	mul	r23, r20
 698:	33 27       	eor	r19, r19
 69a:	a0 0d       	add	r26, r0
 69c:	61 1d       	adc	r22, r1
 69e:	23 1f       	adc	r18, r19
 6a0:	84 9f       	mul	r24, r20
 6a2:	60 0d       	add	r22, r0
 6a4:	21 1d       	adc	r18, r1
 6a6:	82 2f       	mov	r24, r18
 6a8:	76 2f       	mov	r23, r22
 6aa:	6a 2f       	mov	r22, r26
 6ac:	11 24       	eor	r1, r1
 6ae:	9f 57       	subi	r25, 0x7F	; 127
 6b0:	50 40       	sbci	r21, 0x00	; 0
 6b2:	9a f0       	brmi	.+38     	; 0x6da <__mulsf3_pse+0x88>
 6b4:	f1 f0       	breq	.+60     	; 0x6f2 <__mulsf3_pse+0xa0>
 6b6:	88 23       	and	r24, r24
 6b8:	4a f0       	brmi	.+18     	; 0x6cc <__mulsf3_pse+0x7a>
 6ba:	ee 0f       	add	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	bb 1f       	adc	r27, r27
 6c0:	66 1f       	adc	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	91 50       	subi	r25, 0x01	; 1
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__mulsf3_pse+0x64>
 6cc:	9e 3f       	cpi	r25, 0xFE	; 254
 6ce:	51 05       	cpc	r21, r1
 6d0:	80 f0       	brcs	.+32     	; 0x6f2 <__mulsf3_pse+0xa0>
 6d2:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_inf>
 6d6:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_szero>
 6da:	5f 3f       	cpi	r21, 0xFF	; 255
 6dc:	e4 f3       	brlt	.-8      	; 0x6d6 <__mulsf3_pse+0x84>
 6de:	98 3e       	cpi	r25, 0xE8	; 232
 6e0:	d4 f3       	brlt	.-12     	; 0x6d6 <__mulsf3_pse+0x84>
 6e2:	86 95       	lsr	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f7 95       	ror	r31
 6ec:	e7 95       	ror	r30
 6ee:	9f 5f       	subi	r25, 0xFF	; 255
 6f0:	c1 f7       	brne	.-16     	; 0x6e2 <__mulsf3_pse+0x90>
 6f2:	fe 2b       	or	r31, r30
 6f4:	88 0f       	add	r24, r24
 6f6:	91 1d       	adc	r25, r1
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

00000700 <__tablejump2__>:
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	05 90       	lpm	r0, Z+
 706:	f4 91       	lpm	r31, Z
 708:	e0 2d       	mov	r30, r0
 70a:	09 94       	ijmp

0000070c <fgetc>:
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	ec 01       	movw	r28, r24
 712:	2b 81       	ldd	r18, Y+3	; 0x03
 714:	20 ff       	sbrs	r18, 0
 716:	33 c0       	rjmp	.+102    	; 0x77e <fgetc+0x72>
 718:	26 ff       	sbrs	r18, 6
 71a:	0a c0       	rjmp	.+20     	; 0x730 <fgetc+0x24>
 71c:	2f 7b       	andi	r18, 0xBF	; 191
 71e:	2b 83       	std	Y+3, r18	; 0x03
 720:	8e 81       	ldd	r24, Y+6	; 0x06
 722:	9f 81       	ldd	r25, Y+7	; 0x07
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	9f 83       	std	Y+7, r25	; 0x07
 728:	8e 83       	std	Y+6, r24	; 0x06
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	29 c0       	rjmp	.+82     	; 0x782 <fgetc+0x76>
 730:	22 ff       	sbrs	r18, 2
 732:	0f c0       	rjmp	.+30     	; 0x752 <fgetc+0x46>
 734:	e8 81       	ld	r30, Y
 736:	f9 81       	ldd	r31, Y+1	; 0x01
 738:	80 81       	ld	r24, Z
 73a:	08 2e       	mov	r0, r24
 73c:	00 0c       	add	r0, r0
 73e:	99 0b       	sbc	r25, r25
 740:	00 97       	sbiw	r24, 0x00	; 0
 742:	19 f4       	brne	.+6      	; 0x74a <fgetc+0x3e>
 744:	20 62       	ori	r18, 0x20	; 32
 746:	2b 83       	std	Y+3, r18	; 0x03
 748:	1a c0       	rjmp	.+52     	; 0x77e <fgetc+0x72>
 74a:	31 96       	adiw	r30, 0x01	; 1
 74c:	f9 83       	std	Y+1, r31	; 0x01
 74e:	e8 83       	st	Y, r30
 750:	0e c0       	rjmp	.+28     	; 0x76e <fgetc+0x62>
 752:	ea 85       	ldd	r30, Y+10	; 0x0a
 754:	fb 85       	ldd	r31, Y+11	; 0x0b
 756:	09 95       	icall
 758:	97 ff       	sbrs	r25, 7
 75a:	09 c0       	rjmp	.+18     	; 0x76e <fgetc+0x62>
 75c:	2b 81       	ldd	r18, Y+3	; 0x03
 75e:	01 96       	adiw	r24, 0x01	; 1
 760:	11 f0       	breq	.+4      	; 0x766 <fgetc+0x5a>
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	01 c0       	rjmp	.+2      	; 0x768 <fgetc+0x5c>
 766:	80 e1       	ldi	r24, 0x10	; 16
 768:	82 2b       	or	r24, r18
 76a:	8b 83       	std	Y+3, r24	; 0x03
 76c:	08 c0       	rjmp	.+16     	; 0x77e <fgetc+0x72>
 76e:	2e 81       	ldd	r18, Y+6	; 0x06
 770:	3f 81       	ldd	r19, Y+7	; 0x07
 772:	2f 5f       	subi	r18, 0xFF	; 255
 774:	3f 4f       	sbci	r19, 0xFF	; 255
 776:	3f 83       	std	Y+7, r19	; 0x07
 778:	2e 83       	std	Y+6, r18	; 0x06
 77a:	99 27       	eor	r25, r25
 77c:	02 c0       	rjmp	.+4      	; 0x782 <fgetc+0x76>
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	9f ef       	ldi	r25, 0xFF	; 255
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	08 95       	ret

00000788 <printf>:
 788:	a0 e0       	ldi	r26, 0x00	; 0
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	ea ec       	ldi	r30, 0xCA	; 202
 78e:	f3 e0       	ldi	r31, 0x03	; 3
 790:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__prologue_saves__+0x20>
 794:	ae 01       	movw	r20, r28
 796:	4b 5f       	subi	r20, 0xFB	; 251
 798:	5f 4f       	sbci	r21, 0xFF	; 255
 79a:	fa 01       	movw	r30, r20
 79c:	61 91       	ld	r22, Z+
 79e:	71 91       	ld	r23, Z+
 7a0:	af 01       	movw	r20, r30
 7a2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__iob+0x2>
 7a6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <__iob+0x3>
 7aa:	0e 94 0a 04 	call	0x814	; 0x814 <vfprintf>
 7ae:	e2 e0       	ldi	r30, 0x02	; 2
 7b0:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__epilogue_restores__+0x20>

000007b4 <puts>:
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	cf 93       	push	r28
 7ba:	df 93       	push	r29
 7bc:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__iob+0x2>
 7c0:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <__iob+0x3>
 7c4:	23 81       	ldd	r18, Z+3	; 0x03
 7c6:	21 ff       	sbrs	r18, 1
 7c8:	1b c0       	rjmp	.+54     	; 0x800 <__DATA_REGION_LENGTH__>
 7ca:	8c 01       	movw	r16, r24
 7cc:	d0 e0       	ldi	r29, 0x00	; 0
 7ce:	c0 e0       	ldi	r28, 0x00	; 0
 7d0:	f8 01       	movw	r30, r16
 7d2:	81 91       	ld	r24, Z+
 7d4:	8f 01       	movw	r16, r30
 7d6:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <__iob+0x2>
 7da:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <__iob+0x3>
 7de:	db 01       	movw	r26, r22
 7e0:	18 96       	adiw	r26, 0x08	; 8
 7e2:	ed 91       	ld	r30, X+
 7e4:	fc 91       	ld	r31, X
 7e6:	19 97       	sbiw	r26, 0x09	; 9
 7e8:	88 23       	and	r24, r24
 7ea:	31 f0       	breq	.+12     	; 0x7f8 <puts+0x44>
 7ec:	09 95       	icall
 7ee:	89 2b       	or	r24, r25
 7f0:	79 f3       	breq	.-34     	; 0x7d0 <puts+0x1c>
 7f2:	df ef       	ldi	r29, 0xFF	; 255
 7f4:	cf ef       	ldi	r28, 0xFF	; 255
 7f6:	ec cf       	rjmp	.-40     	; 0x7d0 <puts+0x1c>
 7f8:	8a e0       	ldi	r24, 0x0A	; 10
 7fa:	09 95       	icall
 7fc:	89 2b       	or	r24, r25
 7fe:	19 f0       	breq	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	02 c0       	rjmp	.+4      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 806:	8d 2f       	mov	r24, r29
 808:	9c 2f       	mov	r25, r28
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	08 95       	ret

00000814 <vfprintf>:
 814:	ab e0       	ldi	r26, 0x0B	; 11
 816:	b0 e0       	ldi	r27, 0x00	; 0
 818:	e0 e1       	ldi	r30, 0x10	; 16
 81a:	f4 e0       	ldi	r31, 0x04	; 4
 81c:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__prologue_saves__>
 820:	6c 01       	movw	r12, r24
 822:	7b 01       	movw	r14, r22
 824:	8a 01       	movw	r16, r20
 826:	fc 01       	movw	r30, r24
 828:	17 82       	std	Z+7, r1	; 0x07
 82a:	16 82       	std	Z+6, r1	; 0x06
 82c:	83 81       	ldd	r24, Z+3	; 0x03
 82e:	81 ff       	sbrs	r24, 1
 830:	cc c1       	rjmp	.+920    	; 0xbca <__stack+0x2cb>
 832:	ce 01       	movw	r24, r28
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	3c 01       	movw	r6, r24
 838:	f6 01       	movw	r30, r12
 83a:	93 81       	ldd	r25, Z+3	; 0x03
 83c:	f7 01       	movw	r30, r14
 83e:	93 fd       	sbrc	r25, 3
 840:	85 91       	lpm	r24, Z+
 842:	93 ff       	sbrs	r25, 3
 844:	81 91       	ld	r24, Z+
 846:	7f 01       	movw	r14, r30
 848:	88 23       	and	r24, r24
 84a:	09 f4       	brne	.+2      	; 0x84e <vfprintf+0x3a>
 84c:	ba c1       	rjmp	.+884    	; 0xbc2 <__stack+0x2c3>
 84e:	85 32       	cpi	r24, 0x25	; 37
 850:	39 f4       	brne	.+14     	; 0x860 <vfprintf+0x4c>
 852:	93 fd       	sbrc	r25, 3
 854:	85 91       	lpm	r24, Z+
 856:	93 ff       	sbrs	r25, 3
 858:	81 91       	ld	r24, Z+
 85a:	7f 01       	movw	r14, r30
 85c:	85 32       	cpi	r24, 0x25	; 37
 85e:	29 f4       	brne	.+10     	; 0x86a <vfprintf+0x56>
 860:	b6 01       	movw	r22, r12
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 868:	e7 cf       	rjmp	.-50     	; 0x838 <vfprintf+0x24>
 86a:	91 2c       	mov	r9, r1
 86c:	21 2c       	mov	r2, r1
 86e:	31 2c       	mov	r3, r1
 870:	ff e1       	ldi	r31, 0x1F	; 31
 872:	f3 15       	cp	r31, r3
 874:	d8 f0       	brcs	.+54     	; 0x8ac <vfprintf+0x98>
 876:	8b 32       	cpi	r24, 0x2B	; 43
 878:	79 f0       	breq	.+30     	; 0x898 <vfprintf+0x84>
 87a:	38 f4       	brcc	.+14     	; 0x88a <vfprintf+0x76>
 87c:	80 32       	cpi	r24, 0x20	; 32
 87e:	79 f0       	breq	.+30     	; 0x89e <vfprintf+0x8a>
 880:	83 32       	cpi	r24, 0x23	; 35
 882:	a1 f4       	brne	.+40     	; 0x8ac <vfprintf+0x98>
 884:	23 2d       	mov	r18, r3
 886:	20 61       	ori	r18, 0x10	; 16
 888:	1d c0       	rjmp	.+58     	; 0x8c4 <vfprintf+0xb0>
 88a:	8d 32       	cpi	r24, 0x2D	; 45
 88c:	61 f0       	breq	.+24     	; 0x8a6 <vfprintf+0x92>
 88e:	80 33       	cpi	r24, 0x30	; 48
 890:	69 f4       	brne	.+26     	; 0x8ac <vfprintf+0x98>
 892:	23 2d       	mov	r18, r3
 894:	21 60       	ori	r18, 0x01	; 1
 896:	16 c0       	rjmp	.+44     	; 0x8c4 <vfprintf+0xb0>
 898:	83 2d       	mov	r24, r3
 89a:	82 60       	ori	r24, 0x02	; 2
 89c:	38 2e       	mov	r3, r24
 89e:	e3 2d       	mov	r30, r3
 8a0:	e4 60       	ori	r30, 0x04	; 4
 8a2:	3e 2e       	mov	r3, r30
 8a4:	2a c0       	rjmp	.+84     	; 0x8fa <vfprintf+0xe6>
 8a6:	f3 2d       	mov	r31, r3
 8a8:	f8 60       	ori	r31, 0x08	; 8
 8aa:	1d c0       	rjmp	.+58     	; 0x8e6 <vfprintf+0xd2>
 8ac:	37 fc       	sbrc	r3, 7
 8ae:	2d c0       	rjmp	.+90     	; 0x90a <__stack+0xb>
 8b0:	20 ed       	ldi	r18, 0xD0	; 208
 8b2:	28 0f       	add	r18, r24
 8b4:	2a 30       	cpi	r18, 0x0A	; 10
 8b6:	40 f0       	brcs	.+16     	; 0x8c8 <vfprintf+0xb4>
 8b8:	8e 32       	cpi	r24, 0x2E	; 46
 8ba:	b9 f4       	brne	.+46     	; 0x8ea <vfprintf+0xd6>
 8bc:	36 fc       	sbrc	r3, 6
 8be:	81 c1       	rjmp	.+770    	; 0xbc2 <__stack+0x2c3>
 8c0:	23 2d       	mov	r18, r3
 8c2:	20 64       	ori	r18, 0x40	; 64
 8c4:	32 2e       	mov	r3, r18
 8c6:	19 c0       	rjmp	.+50     	; 0x8fa <vfprintf+0xe6>
 8c8:	36 fe       	sbrs	r3, 6
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <vfprintf+0xc4>
 8cc:	8a e0       	ldi	r24, 0x0A	; 10
 8ce:	98 9e       	mul	r9, r24
 8d0:	20 0d       	add	r18, r0
 8d2:	11 24       	eor	r1, r1
 8d4:	92 2e       	mov	r9, r18
 8d6:	11 c0       	rjmp	.+34     	; 0x8fa <vfprintf+0xe6>
 8d8:	ea e0       	ldi	r30, 0x0A	; 10
 8da:	2e 9e       	mul	r2, r30
 8dc:	20 0d       	add	r18, r0
 8de:	11 24       	eor	r1, r1
 8e0:	22 2e       	mov	r2, r18
 8e2:	f3 2d       	mov	r31, r3
 8e4:	f0 62       	ori	r31, 0x20	; 32
 8e6:	3f 2e       	mov	r3, r31
 8e8:	08 c0       	rjmp	.+16     	; 0x8fa <vfprintf+0xe6>
 8ea:	8c 36       	cpi	r24, 0x6C	; 108
 8ec:	21 f4       	brne	.+8      	; 0x8f6 <vfprintf+0xe2>
 8ee:	83 2d       	mov	r24, r3
 8f0:	80 68       	ori	r24, 0x80	; 128
 8f2:	38 2e       	mov	r3, r24
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0xe6>
 8f6:	88 36       	cpi	r24, 0x68	; 104
 8f8:	41 f4       	brne	.+16     	; 0x90a <__stack+0xb>
 8fa:	f7 01       	movw	r30, r14
 8fc:	93 fd       	sbrc	r25, 3
 8fe:	85 91       	lpm	r24, Z+
 900:	93 ff       	sbrs	r25, 3
 902:	81 91       	ld	r24, Z+
 904:	7f 01       	movw	r14, r30
 906:	81 11       	cpse	r24, r1
 908:	b3 cf       	rjmp	.-154    	; 0x870 <vfprintf+0x5c>
 90a:	98 2f       	mov	r25, r24
 90c:	9f 7d       	andi	r25, 0xDF	; 223
 90e:	95 54       	subi	r25, 0x45	; 69
 910:	93 30       	cpi	r25, 0x03	; 3
 912:	28 f4       	brcc	.+10     	; 0x91e <__stack+0x1f>
 914:	0c 5f       	subi	r16, 0xFC	; 252
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	9f e3       	ldi	r25, 0x3F	; 63
 91a:	99 83       	std	Y+1, r25	; 0x01
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__stack+0x39>
 91e:	83 36       	cpi	r24, 0x63	; 99
 920:	31 f0       	breq	.+12     	; 0x92e <__stack+0x2f>
 922:	83 37       	cpi	r24, 0x73	; 115
 924:	71 f0       	breq	.+28     	; 0x942 <__stack+0x43>
 926:	83 35       	cpi	r24, 0x53	; 83
 928:	09 f0       	breq	.+2      	; 0x92c <__stack+0x2d>
 92a:	59 c0       	rjmp	.+178    	; 0x9de <__stack+0xdf>
 92c:	21 c0       	rjmp	.+66     	; 0x970 <__stack+0x71>
 92e:	f8 01       	movw	r30, r16
 930:	80 81       	ld	r24, Z
 932:	89 83       	std	Y+1, r24	; 0x01
 934:	0e 5f       	subi	r16, 0xFE	; 254
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	88 24       	eor	r8, r8
 93a:	83 94       	inc	r8
 93c:	91 2c       	mov	r9, r1
 93e:	53 01       	movw	r10, r6
 940:	13 c0       	rjmp	.+38     	; 0x968 <__stack+0x69>
 942:	28 01       	movw	r4, r16
 944:	f2 e0       	ldi	r31, 0x02	; 2
 946:	4f 0e       	add	r4, r31
 948:	51 1c       	adc	r5, r1
 94a:	f8 01       	movw	r30, r16
 94c:	a0 80       	ld	r10, Z
 94e:	b1 80       	ldd	r11, Z+1	; 0x01
 950:	36 fe       	sbrs	r3, 6
 952:	03 c0       	rjmp	.+6      	; 0x95a <__stack+0x5b>
 954:	69 2d       	mov	r22, r9
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
 95a:	6f ef       	ldi	r22, 0xFF	; 255
 95c:	7f ef       	ldi	r23, 0xFF	; 255
 95e:	c5 01       	movw	r24, r10
 960:	0e 94 f6 05 	call	0xbec	; 0xbec <strnlen>
 964:	4c 01       	movw	r8, r24
 966:	82 01       	movw	r16, r4
 968:	f3 2d       	mov	r31, r3
 96a:	ff 77       	andi	r31, 0x7F	; 127
 96c:	3f 2e       	mov	r3, r31
 96e:	16 c0       	rjmp	.+44     	; 0x99c <__stack+0x9d>
 970:	28 01       	movw	r4, r16
 972:	22 e0       	ldi	r18, 0x02	; 2
 974:	42 0e       	add	r4, r18
 976:	51 1c       	adc	r5, r1
 978:	f8 01       	movw	r30, r16
 97a:	a0 80       	ld	r10, Z
 97c:	b1 80       	ldd	r11, Z+1	; 0x01
 97e:	36 fe       	sbrs	r3, 6
 980:	03 c0       	rjmp	.+6      	; 0x988 <__stack+0x89>
 982:	69 2d       	mov	r22, r9
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	02 c0       	rjmp	.+4      	; 0x98c <__stack+0x8d>
 988:	6f ef       	ldi	r22, 0xFF	; 255
 98a:	7f ef       	ldi	r23, 0xFF	; 255
 98c:	c5 01       	movw	r24, r10
 98e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <strnlen_P>
 992:	4c 01       	movw	r8, r24
 994:	f3 2d       	mov	r31, r3
 996:	f0 68       	ori	r31, 0x80	; 128
 998:	3f 2e       	mov	r3, r31
 99a:	82 01       	movw	r16, r4
 99c:	33 fc       	sbrc	r3, 3
 99e:	1b c0       	rjmp	.+54     	; 0x9d6 <__stack+0xd7>
 9a0:	82 2d       	mov	r24, r2
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	88 16       	cp	r8, r24
 9a6:	99 06       	cpc	r9, r25
 9a8:	b0 f4       	brcc	.+44     	; 0x9d6 <__stack+0xd7>
 9aa:	b6 01       	movw	r22, r12
 9ac:	80 e2       	ldi	r24, 0x20	; 32
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 9b4:	2a 94       	dec	r2
 9b6:	f4 cf       	rjmp	.-24     	; 0x9a0 <__stack+0xa1>
 9b8:	f5 01       	movw	r30, r10
 9ba:	37 fc       	sbrc	r3, 7
 9bc:	85 91       	lpm	r24, Z+
 9be:	37 fe       	sbrs	r3, 7
 9c0:	81 91       	ld	r24, Z+
 9c2:	5f 01       	movw	r10, r30
 9c4:	b6 01       	movw	r22, r12
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 9cc:	21 10       	cpse	r2, r1
 9ce:	2a 94       	dec	r2
 9d0:	21 e0       	ldi	r18, 0x01	; 1
 9d2:	82 1a       	sub	r8, r18
 9d4:	91 08       	sbc	r9, r1
 9d6:	81 14       	cp	r8, r1
 9d8:	91 04       	cpc	r9, r1
 9da:	71 f7       	brne	.-36     	; 0x9b8 <__stack+0xb9>
 9dc:	e8 c0       	rjmp	.+464    	; 0xbae <__stack+0x2af>
 9de:	84 36       	cpi	r24, 0x64	; 100
 9e0:	11 f0       	breq	.+4      	; 0x9e6 <__stack+0xe7>
 9e2:	89 36       	cpi	r24, 0x69	; 105
 9e4:	41 f5       	brne	.+80     	; 0xa36 <__stack+0x137>
 9e6:	f8 01       	movw	r30, r16
 9e8:	37 fe       	sbrs	r3, 7
 9ea:	07 c0       	rjmp	.+14     	; 0x9fa <__stack+0xfb>
 9ec:	60 81       	ld	r22, Z
 9ee:	71 81       	ldd	r23, Z+1	; 0x01
 9f0:	82 81       	ldd	r24, Z+2	; 0x02
 9f2:	93 81       	ldd	r25, Z+3	; 0x03
 9f4:	0c 5f       	subi	r16, 0xFC	; 252
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <__stack+0x10b>
 9fa:	60 81       	ld	r22, Z
 9fc:	71 81       	ldd	r23, Z+1	; 0x01
 9fe:	07 2e       	mov	r0, r23
 a00:	00 0c       	add	r0, r0
 a02:	88 0b       	sbc	r24, r24
 a04:	99 0b       	sbc	r25, r25
 a06:	0e 5f       	subi	r16, 0xFE	; 254
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	f3 2d       	mov	r31, r3
 a0c:	ff 76       	andi	r31, 0x6F	; 111
 a0e:	3f 2e       	mov	r3, r31
 a10:	97 ff       	sbrs	r25, 7
 a12:	09 c0       	rjmp	.+18     	; 0xa26 <__stack+0x127>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	f0 68       	ori	r31, 0x80	; 128
 a24:	3f 2e       	mov	r3, r31
 a26:	2a e0       	ldi	r18, 0x0A	; 10
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	a3 01       	movw	r20, r6
 a2c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__ultoa_invert>
 a30:	88 2e       	mov	r8, r24
 a32:	86 18       	sub	r8, r6
 a34:	45 c0       	rjmp	.+138    	; 0xac0 <__stack+0x1c1>
 a36:	85 37       	cpi	r24, 0x75	; 117
 a38:	31 f4       	brne	.+12     	; 0xa46 <__stack+0x147>
 a3a:	23 2d       	mov	r18, r3
 a3c:	2f 7e       	andi	r18, 0xEF	; 239
 a3e:	b2 2e       	mov	r11, r18
 a40:	2a e0       	ldi	r18, 0x0A	; 10
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	25 c0       	rjmp	.+74     	; 0xa90 <__stack+0x191>
 a46:	93 2d       	mov	r25, r3
 a48:	99 7f       	andi	r25, 0xF9	; 249
 a4a:	b9 2e       	mov	r11, r25
 a4c:	8f 36       	cpi	r24, 0x6F	; 111
 a4e:	c1 f0       	breq	.+48     	; 0xa80 <__stack+0x181>
 a50:	18 f4       	brcc	.+6      	; 0xa58 <__stack+0x159>
 a52:	88 35       	cpi	r24, 0x58	; 88
 a54:	79 f0       	breq	.+30     	; 0xa74 <__stack+0x175>
 a56:	b5 c0       	rjmp	.+362    	; 0xbc2 <__stack+0x2c3>
 a58:	80 37       	cpi	r24, 0x70	; 112
 a5a:	19 f0       	breq	.+6      	; 0xa62 <__stack+0x163>
 a5c:	88 37       	cpi	r24, 0x78	; 120
 a5e:	21 f0       	breq	.+8      	; 0xa68 <__stack+0x169>
 a60:	b0 c0       	rjmp	.+352    	; 0xbc2 <__stack+0x2c3>
 a62:	e9 2f       	mov	r30, r25
 a64:	e0 61       	ori	r30, 0x10	; 16
 a66:	be 2e       	mov	r11, r30
 a68:	b4 fe       	sbrs	r11, 4
 a6a:	0d c0       	rjmp	.+26     	; 0xa86 <__stack+0x187>
 a6c:	fb 2d       	mov	r31, r11
 a6e:	f4 60       	ori	r31, 0x04	; 4
 a70:	bf 2e       	mov	r11, r31
 a72:	09 c0       	rjmp	.+18     	; 0xa86 <__stack+0x187>
 a74:	34 fe       	sbrs	r3, 4
 a76:	0a c0       	rjmp	.+20     	; 0xa8c <__stack+0x18d>
 a78:	29 2f       	mov	r18, r25
 a7a:	26 60       	ori	r18, 0x06	; 6
 a7c:	b2 2e       	mov	r11, r18
 a7e:	06 c0       	rjmp	.+12     	; 0xa8c <__stack+0x18d>
 a80:	28 e0       	ldi	r18, 0x08	; 8
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	05 c0       	rjmp	.+10     	; 0xa90 <__stack+0x191>
 a86:	20 e1       	ldi	r18, 0x10	; 16
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x191>
 a8c:	20 e1       	ldi	r18, 0x10	; 16
 a8e:	32 e0       	ldi	r19, 0x02	; 2
 a90:	f8 01       	movw	r30, r16
 a92:	b7 fe       	sbrs	r11, 7
 a94:	07 c0       	rjmp	.+14     	; 0xaa4 <__stack+0x1a5>
 a96:	60 81       	ld	r22, Z
 a98:	71 81       	ldd	r23, Z+1	; 0x01
 a9a:	82 81       	ldd	r24, Z+2	; 0x02
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	0c 5f       	subi	r16, 0xFC	; 252
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <__stack+0x1b1>
 aa4:	60 81       	ld	r22, Z
 aa6:	71 81       	ldd	r23, Z+1	; 0x01
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 5f       	subi	r16, 0xFE	; 254
 aae:	1f 4f       	sbci	r17, 0xFF	; 255
 ab0:	a3 01       	movw	r20, r6
 ab2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__ultoa_invert>
 ab6:	88 2e       	mov	r8, r24
 ab8:	86 18       	sub	r8, r6
 aba:	fb 2d       	mov	r31, r11
 abc:	ff 77       	andi	r31, 0x7F	; 127
 abe:	3f 2e       	mov	r3, r31
 ac0:	36 fe       	sbrs	r3, 6
 ac2:	0d c0       	rjmp	.+26     	; 0xade <__stack+0x1df>
 ac4:	23 2d       	mov	r18, r3
 ac6:	2e 7f       	andi	r18, 0xFE	; 254
 ac8:	a2 2e       	mov	r10, r18
 aca:	89 14       	cp	r8, r9
 acc:	58 f4       	brcc	.+22     	; 0xae4 <__stack+0x1e5>
 ace:	34 fe       	sbrs	r3, 4
 ad0:	0b c0       	rjmp	.+22     	; 0xae8 <__stack+0x1e9>
 ad2:	32 fc       	sbrc	r3, 2
 ad4:	09 c0       	rjmp	.+18     	; 0xae8 <__stack+0x1e9>
 ad6:	83 2d       	mov	r24, r3
 ad8:	8e 7e       	andi	r24, 0xEE	; 238
 ada:	a8 2e       	mov	r10, r24
 adc:	05 c0       	rjmp	.+10     	; 0xae8 <__stack+0x1e9>
 ade:	b8 2c       	mov	r11, r8
 ae0:	a3 2c       	mov	r10, r3
 ae2:	03 c0       	rjmp	.+6      	; 0xaea <__stack+0x1eb>
 ae4:	b8 2c       	mov	r11, r8
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <__stack+0x1eb>
 ae8:	b9 2c       	mov	r11, r9
 aea:	a4 fe       	sbrs	r10, 4
 aec:	0f c0       	rjmp	.+30     	; 0xb0c <__stack+0x20d>
 aee:	fe 01       	movw	r30, r28
 af0:	e8 0d       	add	r30, r8
 af2:	f1 1d       	adc	r31, r1
 af4:	80 81       	ld	r24, Z
 af6:	80 33       	cpi	r24, 0x30	; 48
 af8:	21 f4       	brne	.+8      	; 0xb02 <__stack+0x203>
 afa:	9a 2d       	mov	r25, r10
 afc:	99 7e       	andi	r25, 0xE9	; 233
 afe:	a9 2e       	mov	r10, r25
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <__stack+0x215>
 b02:	a2 fe       	sbrs	r10, 2
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <__stack+0x213>
 b06:	b3 94       	inc	r11
 b08:	b3 94       	inc	r11
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <__stack+0x215>
 b0c:	8a 2d       	mov	r24, r10
 b0e:	86 78       	andi	r24, 0x86	; 134
 b10:	09 f0       	breq	.+2      	; 0xb14 <__stack+0x215>
 b12:	b3 94       	inc	r11
 b14:	a3 fc       	sbrc	r10, 3
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <__stack+0x23b>
 b18:	a0 fe       	sbrs	r10, 0
 b1a:	06 c0       	rjmp	.+12     	; 0xb28 <__stack+0x229>
 b1c:	b2 14       	cp	r11, r2
 b1e:	88 f4       	brcc	.+34     	; 0xb42 <__stack+0x243>
 b20:	28 0c       	add	r2, r8
 b22:	92 2c       	mov	r9, r2
 b24:	9b 18       	sub	r9, r11
 b26:	0e c0       	rjmp	.+28     	; 0xb44 <__stack+0x245>
 b28:	b2 14       	cp	r11, r2
 b2a:	60 f4       	brcc	.+24     	; 0xb44 <__stack+0x245>
 b2c:	b6 01       	movw	r22, r12
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b36:	b3 94       	inc	r11
 b38:	f7 cf       	rjmp	.-18     	; 0xb28 <__stack+0x229>
 b3a:	b2 14       	cp	r11, r2
 b3c:	18 f4       	brcc	.+6      	; 0xb44 <__stack+0x245>
 b3e:	2b 18       	sub	r2, r11
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <__stack+0x247>
 b42:	98 2c       	mov	r9, r8
 b44:	21 2c       	mov	r2, r1
 b46:	a4 fe       	sbrs	r10, 4
 b48:	10 c0       	rjmp	.+32     	; 0xb6a <__stack+0x26b>
 b4a:	b6 01       	movw	r22, r12
 b4c:	80 e3       	ldi	r24, 0x30	; 48
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b54:	a2 fe       	sbrs	r10, 2
 b56:	17 c0       	rjmp	.+46     	; 0xb86 <__stack+0x287>
 b58:	a1 fc       	sbrc	r10, 1
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <__stack+0x263>
 b5c:	88 e7       	ldi	r24, 0x78	; 120
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <__stack+0x267>
 b62:	88 e5       	ldi	r24, 0x58	; 88
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	b6 01       	movw	r22, r12
 b68:	0c c0       	rjmp	.+24     	; 0xb82 <__stack+0x283>
 b6a:	8a 2d       	mov	r24, r10
 b6c:	86 78       	andi	r24, 0x86	; 134
 b6e:	59 f0       	breq	.+22     	; 0xb86 <__stack+0x287>
 b70:	a1 fe       	sbrs	r10, 1
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <__stack+0x279>
 b74:	8b e2       	ldi	r24, 0x2B	; 43
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <__stack+0x27b>
 b78:	80 e2       	ldi	r24, 0x20	; 32
 b7a:	a7 fc       	sbrc	r10, 7
 b7c:	8d e2       	ldi	r24, 0x2D	; 45
 b7e:	b6 01       	movw	r22, r12
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b86:	89 14       	cp	r8, r9
 b88:	38 f4       	brcc	.+14     	; 0xb98 <__stack+0x299>
 b8a:	b6 01       	movw	r22, r12
 b8c:	80 e3       	ldi	r24, 0x30	; 48
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 b94:	9a 94       	dec	r9
 b96:	f7 cf       	rjmp	.-18     	; 0xb86 <__stack+0x287>
 b98:	8a 94       	dec	r8
 b9a:	f3 01       	movw	r30, r6
 b9c:	e8 0d       	add	r30, r8
 b9e:	f1 1d       	adc	r31, r1
 ba0:	80 81       	ld	r24, Z
 ba2:	b6 01       	movw	r22, r12
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 baa:	81 10       	cpse	r8, r1
 bac:	f5 cf       	rjmp	.-22     	; 0xb98 <__stack+0x299>
 bae:	22 20       	and	r2, r2
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <__stack+0x2b5>
 bb2:	42 ce       	rjmp	.-892    	; 0x838 <vfprintf+0x24>
 bb4:	b6 01       	movw	r22, r12
 bb6:	80 e2       	ldi	r24, 0x20	; 32
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	0e 94 01 06 	call	0xc02	; 0xc02 <fputc>
 bbe:	2a 94       	dec	r2
 bc0:	f6 cf       	rjmp	.-20     	; 0xbae <__stack+0x2af>
 bc2:	f6 01       	movw	r30, r12
 bc4:	86 81       	ldd	r24, Z+6	; 0x06
 bc6:	97 81       	ldd	r25, Z+7	; 0x07
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <__stack+0x2cf>
 bca:	8f ef       	ldi	r24, 0xFF	; 255
 bcc:	9f ef       	ldi	r25, 0xFF	; 255
 bce:	2b 96       	adiw	r28, 0x0b	; 11
 bd0:	e2 e1       	ldi	r30, 0x12	; 18
 bd2:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__epilogue_restores__>

00000bd6 <strnlen_P>:
 bd6:	fc 01       	movw	r30, r24
 bd8:	05 90       	lpm	r0, Z+
 bda:	61 50       	subi	r22, 0x01	; 1
 bdc:	70 40       	sbci	r23, 0x00	; 0
 bde:	01 10       	cpse	r0, r1
 be0:	d8 f7       	brcc	.-10     	; 0xbd8 <strnlen_P+0x2>
 be2:	80 95       	com	r24
 be4:	90 95       	com	r25
 be6:	8e 0f       	add	r24, r30
 be8:	9f 1f       	adc	r25, r31
 bea:	08 95       	ret

00000bec <strnlen>:
 bec:	fc 01       	movw	r30, r24
 bee:	61 50       	subi	r22, 0x01	; 1
 bf0:	70 40       	sbci	r23, 0x00	; 0
 bf2:	01 90       	ld	r0, Z+
 bf4:	01 10       	cpse	r0, r1
 bf6:	d8 f7       	brcc	.-10     	; 0xbee <strnlen+0x2>
 bf8:	80 95       	com	r24
 bfa:	90 95       	com	r25
 bfc:	8e 0f       	add	r24, r30
 bfe:	9f 1f       	adc	r25, r31
 c00:	08 95       	ret

00000c02 <fputc>:
 c02:	0f 93       	push	r16
 c04:	1f 93       	push	r17
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	fb 01       	movw	r30, r22
 c0c:	23 81       	ldd	r18, Z+3	; 0x03
 c0e:	21 fd       	sbrc	r18, 1
 c10:	03 c0       	rjmp	.+6      	; 0xc18 <fputc+0x16>
 c12:	8f ef       	ldi	r24, 0xFF	; 255
 c14:	9f ef       	ldi	r25, 0xFF	; 255
 c16:	2c c0       	rjmp	.+88     	; 0xc70 <fputc+0x6e>
 c18:	22 ff       	sbrs	r18, 2
 c1a:	16 c0       	rjmp	.+44     	; 0xc48 <fputc+0x46>
 c1c:	46 81       	ldd	r20, Z+6	; 0x06
 c1e:	57 81       	ldd	r21, Z+7	; 0x07
 c20:	24 81       	ldd	r18, Z+4	; 0x04
 c22:	35 81       	ldd	r19, Z+5	; 0x05
 c24:	42 17       	cp	r20, r18
 c26:	53 07       	cpc	r21, r19
 c28:	44 f4       	brge	.+16     	; 0xc3a <fputc+0x38>
 c2a:	a0 81       	ld	r26, Z
 c2c:	b1 81       	ldd	r27, Z+1	; 0x01
 c2e:	9d 01       	movw	r18, r26
 c30:	2f 5f       	subi	r18, 0xFF	; 255
 c32:	3f 4f       	sbci	r19, 0xFF	; 255
 c34:	31 83       	std	Z+1, r19	; 0x01
 c36:	20 83       	st	Z, r18
 c38:	8c 93       	st	X, r24
 c3a:	26 81       	ldd	r18, Z+6	; 0x06
 c3c:	37 81       	ldd	r19, Z+7	; 0x07
 c3e:	2f 5f       	subi	r18, 0xFF	; 255
 c40:	3f 4f       	sbci	r19, 0xFF	; 255
 c42:	37 83       	std	Z+7, r19	; 0x07
 c44:	26 83       	std	Z+6, r18	; 0x06
 c46:	14 c0       	rjmp	.+40     	; 0xc70 <fputc+0x6e>
 c48:	8b 01       	movw	r16, r22
 c4a:	ec 01       	movw	r28, r24
 c4c:	fb 01       	movw	r30, r22
 c4e:	00 84       	ldd	r0, Z+8	; 0x08
 c50:	f1 85       	ldd	r31, Z+9	; 0x09
 c52:	e0 2d       	mov	r30, r0
 c54:	09 95       	icall
 c56:	89 2b       	or	r24, r25
 c58:	e1 f6       	brne	.-72     	; 0xc12 <fputc+0x10>
 c5a:	d8 01       	movw	r26, r16
 c5c:	16 96       	adiw	r26, 0x06	; 6
 c5e:	8d 91       	ld	r24, X+
 c60:	9c 91       	ld	r25, X
 c62:	17 97       	sbiw	r26, 0x07	; 7
 c64:	01 96       	adiw	r24, 0x01	; 1
 c66:	17 96       	adiw	r26, 0x07	; 7
 c68:	9c 93       	st	X, r25
 c6a:	8e 93       	st	-X, r24
 c6c:	16 97       	sbiw	r26, 0x06	; 6
 c6e:	ce 01       	movw	r24, r28
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	1f 91       	pop	r17
 c76:	0f 91       	pop	r16
 c78:	08 95       	ret

00000c7a <__ultoa_invert>:
 c7a:	fa 01       	movw	r30, r20
 c7c:	aa 27       	eor	r26, r26
 c7e:	28 30       	cpi	r18, 0x08	; 8
 c80:	51 f1       	breq	.+84     	; 0xcd6 <__ultoa_invert+0x5c>
 c82:	20 31       	cpi	r18, 0x10	; 16
 c84:	81 f1       	breq	.+96     	; 0xce6 <__ultoa_invert+0x6c>
 c86:	e8 94       	clt
 c88:	6f 93       	push	r22
 c8a:	6e 7f       	andi	r22, 0xFE	; 254
 c8c:	6e 5f       	subi	r22, 0xFE	; 254
 c8e:	7f 4f       	sbci	r23, 0xFF	; 255
 c90:	8f 4f       	sbci	r24, 0xFF	; 255
 c92:	9f 4f       	sbci	r25, 0xFF	; 255
 c94:	af 4f       	sbci	r26, 0xFF	; 255
 c96:	b1 e0       	ldi	r27, 0x01	; 1
 c98:	3e d0       	rcall	.+124    	; 0xd16 <__ultoa_invert+0x9c>
 c9a:	b4 e0       	ldi	r27, 0x04	; 4
 c9c:	3c d0       	rcall	.+120    	; 0xd16 <__ultoa_invert+0x9c>
 c9e:	67 0f       	add	r22, r23
 ca0:	78 1f       	adc	r23, r24
 ca2:	89 1f       	adc	r24, r25
 ca4:	9a 1f       	adc	r25, r26
 ca6:	a1 1d       	adc	r26, r1
 ca8:	68 0f       	add	r22, r24
 caa:	79 1f       	adc	r23, r25
 cac:	8a 1f       	adc	r24, r26
 cae:	91 1d       	adc	r25, r1
 cb0:	a1 1d       	adc	r26, r1
 cb2:	6a 0f       	add	r22, r26
 cb4:	71 1d       	adc	r23, r1
 cb6:	81 1d       	adc	r24, r1
 cb8:	91 1d       	adc	r25, r1
 cba:	a1 1d       	adc	r26, r1
 cbc:	20 d0       	rcall	.+64     	; 0xcfe <__ultoa_invert+0x84>
 cbe:	09 f4       	brne	.+2      	; 0xcc2 <__ultoa_invert+0x48>
 cc0:	68 94       	set
 cc2:	3f 91       	pop	r19
 cc4:	2a e0       	ldi	r18, 0x0A	; 10
 cc6:	26 9f       	mul	r18, r22
 cc8:	11 24       	eor	r1, r1
 cca:	30 19       	sub	r19, r0
 ccc:	30 5d       	subi	r19, 0xD0	; 208
 cce:	31 93       	st	Z+, r19
 cd0:	de f6       	brtc	.-74     	; 0xc88 <__ultoa_invert+0xe>
 cd2:	cf 01       	movw	r24, r30
 cd4:	08 95       	ret
 cd6:	46 2f       	mov	r20, r22
 cd8:	47 70       	andi	r20, 0x07	; 7
 cda:	40 5d       	subi	r20, 0xD0	; 208
 cdc:	41 93       	st	Z+, r20
 cde:	b3 e0       	ldi	r27, 0x03	; 3
 ce0:	0f d0       	rcall	.+30     	; 0xd00 <__ultoa_invert+0x86>
 ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__ultoa_invert+0x5c>
 ce4:	f6 cf       	rjmp	.-20     	; 0xcd2 <__ultoa_invert+0x58>
 ce6:	46 2f       	mov	r20, r22
 ce8:	4f 70       	andi	r20, 0x0F	; 15
 cea:	40 5d       	subi	r20, 0xD0	; 208
 cec:	4a 33       	cpi	r20, 0x3A	; 58
 cee:	18 f0       	brcs	.+6      	; 0xcf6 <__ultoa_invert+0x7c>
 cf0:	49 5d       	subi	r20, 0xD9	; 217
 cf2:	31 fd       	sbrc	r19, 1
 cf4:	40 52       	subi	r20, 0x20	; 32
 cf6:	41 93       	st	Z+, r20
 cf8:	02 d0       	rcall	.+4      	; 0xcfe <__ultoa_invert+0x84>
 cfa:	a9 f7       	brne	.-22     	; 0xce6 <__ultoa_invert+0x6c>
 cfc:	ea cf       	rjmp	.-44     	; 0xcd2 <__ultoa_invert+0x58>
 cfe:	b4 e0       	ldi	r27, 0x04	; 4
 d00:	a6 95       	lsr	r26
 d02:	97 95       	ror	r25
 d04:	87 95       	ror	r24
 d06:	77 95       	ror	r23
 d08:	67 95       	ror	r22
 d0a:	ba 95       	dec	r27
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <__ultoa_invert+0x86>
 d0e:	00 97       	sbiw	r24, 0x00	; 0
 d10:	61 05       	cpc	r22, r1
 d12:	71 05       	cpc	r23, r1
 d14:	08 95       	ret
 d16:	9b 01       	movw	r18, r22
 d18:	ac 01       	movw	r20, r24
 d1a:	0a 2e       	mov	r0, r26
 d1c:	06 94       	lsr	r0
 d1e:	57 95       	ror	r21
 d20:	47 95       	ror	r20
 d22:	37 95       	ror	r19
 d24:	27 95       	ror	r18
 d26:	ba 95       	dec	r27
 d28:	c9 f7       	brne	.-14     	; 0xd1c <__ultoa_invert+0xa2>
 d2a:	62 0f       	add	r22, r18
 d2c:	73 1f       	adc	r23, r19
 d2e:	84 1f       	adc	r24, r20
 d30:	95 1f       	adc	r25, r21
 d32:	a0 1d       	adc	r26, r0
 d34:	08 95       	ret

00000d36 <__prologue_saves__>:
 d36:	2f 92       	push	r2
 d38:	3f 92       	push	r3
 d3a:	4f 92       	push	r4
 d3c:	5f 92       	push	r5
 d3e:	6f 92       	push	r6
 d40:	7f 92       	push	r7
 d42:	8f 92       	push	r8
 d44:	9f 92       	push	r9
 d46:	af 92       	push	r10
 d48:	bf 92       	push	r11
 d4a:	cf 92       	push	r12
 d4c:	df 92       	push	r13
 d4e:	ef 92       	push	r14
 d50:	ff 92       	push	r15
 d52:	0f 93       	push	r16
 d54:	1f 93       	push	r17
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	cd b7       	in	r28, 0x3d	; 61
 d5c:	de b7       	in	r29, 0x3e	; 62
 d5e:	ca 1b       	sub	r28, r26
 d60:	db 0b       	sbc	r29, r27
 d62:	0f b6       	in	r0, 0x3f	; 63
 d64:	f8 94       	cli
 d66:	de bf       	out	0x3e, r29	; 62
 d68:	0f be       	out	0x3f, r0	; 63
 d6a:	cd bf       	out	0x3d, r28	; 61
 d6c:	09 94       	ijmp

00000d6e <__epilogue_restores__>:
 d6e:	2a 88       	ldd	r2, Y+18	; 0x12
 d70:	39 88       	ldd	r3, Y+17	; 0x11
 d72:	48 88       	ldd	r4, Y+16	; 0x10
 d74:	5f 84       	ldd	r5, Y+15	; 0x0f
 d76:	6e 84       	ldd	r6, Y+14	; 0x0e
 d78:	7d 84       	ldd	r7, Y+13	; 0x0d
 d7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d80:	b9 84       	ldd	r11, Y+9	; 0x09
 d82:	c8 84       	ldd	r12, Y+8	; 0x08
 d84:	df 80       	ldd	r13, Y+7	; 0x07
 d86:	ee 80       	ldd	r14, Y+6	; 0x06
 d88:	fd 80       	ldd	r15, Y+5	; 0x05
 d8a:	0c 81       	ldd	r16, Y+4	; 0x04
 d8c:	1b 81       	ldd	r17, Y+3	; 0x03
 d8e:	aa 81       	ldd	r26, Y+2	; 0x02
 d90:	b9 81       	ldd	r27, Y+1	; 0x01
 d92:	ce 0f       	add	r28, r30
 d94:	d1 1d       	adc	r29, r1
 d96:	0f b6       	in	r0, 0x3f	; 63
 d98:	f8 94       	cli
 d9a:	de bf       	out	0x3e, r29	; 62
 d9c:	0f be       	out	0x3f, r0	; 63
 d9e:	cd bf       	out	0x3d, r28	; 61
 da0:	ed 01       	movw	r28, r26
 da2:	08 95       	ret

00000da4 <_exit>:
 da4:	f8 94       	cli

00000da6 <__stop_program>:
 da6:	ff cf       	rjmp	.-2      	; 0xda6 <__stop_program>
