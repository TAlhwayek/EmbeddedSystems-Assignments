
DA3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fe  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091d  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000341  00000000  00000000  0000163f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f8  00000000  00000000  00001e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_13>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  d4:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_13>:
int thirdCounter  = 0;							// thirdCounter is for Task 3

// Task 2 Interrupt
// 1 second
ISR(TIMER1_OVF_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	TCNT1 = 0xC1CA;								// Reinitialize the timer
  ec:	8a ec       	ldi	r24, 0xCA	; 202
  ee:	91 ec       	ldi	r25, 0xC1	; 193
  f0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  f4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	secondCounter++;							// Increment overflow counter
  f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <secondCounter>
  fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <secondCounter+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <secondCounter+0x1>
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <secondCounter>
	if (secondCounter == 1003) {				// 1003 overflows = 0.999s delay
 10a:	8b 3e       	cpi	r24, 0xEB	; 235
 10c:	93 40       	sbci	r25, 0x03	; 3
 10e:	41 f4       	brne	.+16     	; 0x120 <__vector_13+0x44>
		PORTB ^= (1 << DDB3);					// Toggles the led at PB3
 110:	95 b1       	in	r25, 0x05	; 5
 112:	88 e0       	ldi	r24, 0x08	; 8
 114:	89 27       	eor	r24, r25
 116:	85 b9       	out	0x05, r24	; 5
		secondCounter = 0;						// Reset secondCounter
 118:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <secondCounter+0x1>
 11c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <secondCounter>
	}
}
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <__vector_7>:

// Task 3 Interrupt
// 1.333 seconds
ISR (TIMER2_COMPA_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
	OCR2A = 165;								// Reinitialize timer
 140:	85 ea       	ldi	r24, 0xA5	; 165
 142:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	thirdCounter++;								// Increment overflow counter
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	if(thirdCounter == 2008) {					// 2008 overflows = 1.333s delay
 158:	88 3d       	cpi	r24, 0xD8	; 216
 15a:	97 40       	sbci	r25, 0x07	; 7
 15c:	41 f4       	brne	.+16     	; 0x16e <__vector_7+0x3e>
		PORTB ^= (1 << DDB2);					// Toggle LED at PB2
 15e:	95 b1       	in	r25, 0x05	; 5
 160:	84 e0       	ldi	r24, 0x04	; 4
 162:	89 27       	eor	r24, r25
 164:	85 b9       	out	0x05, r24	; 5
		thirdCounter = 0;						// Reset thirdCounter
 166:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 16a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
}
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:

int main(void)
{
	
	DDRB = 0x3C;								// PORTB2 to PORTB5 as output
 17e:	8c e3       	ldi	r24, 0x3C	; 60
 180:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x20;								// Turn off PORTB5
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	85 b9       	out	0x05, r24	; 5
	
	// Task 1 with Timer0
	TCCR0A = 0;									// Normal Operation
 186:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x00;								// Start the timer
 188:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1 << CS00);						// set prescaler to 1 and start the timer
 18a:	85 b5       	in	r24, 0x25	; 37
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	85 bd       	out	0x25, r24	; 37
	
	// Task 2 with Timer1
	TCCR1A = 0;									// Initialize the timer
 190:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= (1 << CS10);						// Set up timer with prescaler = 1
 194:	e1 e8       	ldi	r30, 0x81	; 129
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
	TCNT1 = 0xC1CA;								// Initialize counter to get a 0.999ms delay
 19e:	8a ec       	ldi	r24, 0xCA	; 202
 1a0:	91 ec       	ldi	r25, 0xC1	; 193
 1a2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1a6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |= (1 << TOIE1);						// Enable overflow interrupt
 1aa:	ef e6       	ldi	r30, 0x6F	; 111
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	80 83       	st	Z, r24
	
	// Task 3 with Timer2
	OCR2A = 165;								// Load Compare Reg value to get 0.666ms
 1b4:	85 ea       	ldi	r24, 0xA5	; 165
 1b6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A |= (1 << WGM21);						// Set to CTC Mode
 1ba:	e0 eb       	ldi	r30, 0xB0	; 176
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	82 60       	ori	r24, 0x02	; 2
 1c2:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2A);					// Set interrupt on compare match
 1c4:	e0 e7       	ldi	r30, 0x70	; 112
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	82 60       	ori	r24, 0x02	; 2
 1cc:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22);						// set prescaler to 64 and starts PWM
 1ce:	e1 eb       	ldi	r30, 0xB1	; 177
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	84 60       	ori	r24, 0x04	; 4
 1d6:	80 83       	st	Z, r24
		
	sei();										// Enable global interrupts
 1d8:	78 94       	sei
	// TASK 1
	while (1)									// Keep looping indefinitely
	{
		// Task 1							
		// 1s delay
		for(int i = 0; i < 2977; i++) {			// Loop 2977 times = 1s delay
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	0d c0       	rjmp	.+26     	; 0x1fa <main+0x7c>
			int counter = 0;					// Reset counter each loop
		// 0.333ms delays using a timer
			while (counter < 21) {				// Repeat 21 times
				while ((TIFR0 & 0x01) == 0);	// Wait for timer0 overflow
 1e0:	a8 9b       	sbis	0x15, 0	; 21
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <main+0x62>
				counter++;						// Increment counter after every timer0 overflow
 1e4:	01 96       	adiw	r24, 0x01	; 1
				TIFR0=0x01;						// Reset the timer0 overflow flag
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	25 bb       	out	0x15, r18	; 21
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <main+0x72>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
		// Task 1							
		// 1s delay
		for(int i = 0; i < 2977; i++) {			// Loop 2977 times = 1s delay
			int counter = 0;					// Reset counter each loop
		// 0.333ms delays using a timer
			while (counter < 21) {				// Repeat 21 times
 1f0:	85 31       	cpi	r24, 0x15	; 21
 1f2:	91 05       	cpc	r25, r1
 1f4:	ac f3       	brlt	.-22     	; 0x1e0 <main+0x62>
	// TASK 1
	while (1)									// Keep looping indefinitely
	{
		// Task 1							
		// 1s delay
		for(int i = 0; i < 2977; i++) {			// Loop 2977 times = 1s delay
 1f6:	4f 5f       	subi	r20, 0xFF	; 255
 1f8:	5f 4f       	sbci	r21, 0xFF	; 255
 1fa:	41 3a       	cpi	r20, 0xA1	; 161
 1fc:	8b e0       	ldi	r24, 0x0B	; 11
 1fe:	58 07       	cpc	r21, r24
 200:	ac f3       	brlt	.-22     	; 0x1ec <main+0x6e>
				while ((TIFR0 & 0x01) == 0);	// Wait for timer0 overflow
				counter++;						// Increment counter after every timer0 overflow
				TIFR0=0x01;						// Reset the timer0 overflow flag
			} 
		}
		PORTB ^= (1<<DDB4);						// Toggle LED at PB2
 202:	95 b1       	in	r25, 0x05	; 5
 204:	80 e1       	ldi	r24, 0x10	; 16
 206:	89 27       	eor	r24, r25
 208:	85 b9       	out	0x05, r24	; 5
	}
 20a:	e7 cf       	rjmp	.-50     	; 0x1da <main+0x5c>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
